/*
 * DO NOT EDIT THIS FILE. Generated by checkmk.
 * Edit the original source file
 * "tests/func_tests/tests_check/test_s21_exptoa.c" instead.
 */

#include <check.h>

#include "../s21_string_tests.h"
#include "test_s21_lftoa.h"

START_TEST(float_data) {
  input_f_s21_lftoa input[] = INPUT_FLOAT_DATA;
  char *s21_out = s21_calloc(BUF_SIZE + 1);
  char *orig_out = s21_calloc(BUF_SIZE + 1);
  s21_out = S21_EXPTOA(s21_out, input[_i].num, input[_i].precision);
  int len_s21_out = strlen(s21_out);
  int len_orig_out =
      sprintf(orig_out, "%.*e", input[_i].precision, input[_i].num);
  int result =
      (len_s21_out == len_orig_out) && (strcmp(s21_out, orig_out) == 0);
  ck_assert_msg(result,
                "\ninput: {%.*e} {%d}\n[orig str: %s]\n[s21 str: %s]\n[orig "
                "len: %d]\n[s21 len: %d]",
                input[_i].precision, input[_i].num, input[_i].precision,
                orig_out, s21_out, len_orig_out, len_s21_out);
  free(s21_out);
  free(orig_out);
}
END_TEST

START_TEST(double_data) {
  input_d_s21_lftoa input[] = INPUT_DOUBLE_DATA;
  char *s21_out = s21_calloc(BUF_SIZE + 1);
  char *orig_out = s21_calloc(BUF_SIZE + 1);
  s21_out = S21_EXPTOA(s21_out, input[_i].num, input[_i].precision);
  int len_s21_out = strlen(s21_out);
  int len_orig_out =
      sprintf(orig_out, "%.*e", input[_i].precision, input[_i].num);
  int result =
      (len_s21_out == len_orig_out) && (strcmp(s21_out, orig_out) == 0);
  ck_assert_msg(result,
                "\ninput: {%.*e} {%d}\n[orig str: %s]\n[s21 str: %s]\n[orig "
                "len: %d]\n[s21 len: %d]",
                input[_i].precision, input[_i].num, input[_i].precision,
                orig_out, s21_out, len_orig_out, len_s21_out);
  free(s21_out);
  free(orig_out);
}
END_TEST

START_TEST(long_double_data) {
  input_ld_s21_lftoa input[] = INPUT_LONG_DOUBLE_DATA;
  char *s21_out = s21_calloc(BUF_SIZE + 1);
  char *orig_out = s21_calloc(BUF_SIZE + 1);
  s21_out = S21_EXPTOA(s21_out, input[_i].num, input[_i].precision);
  int len_s21_out = strlen(s21_out);
  int len_orig_out =
      sprintf(orig_out, "%.*Le", input[_i].precision, input[_i].num);
  int result =
      (len_s21_out == len_orig_out) && (strcmp(s21_out, orig_out) == 0);
  ck_assert_msg(result,
                "\ninput: {%.*Le} {%d}\n[orig str: %s]\n[s21 str: %s]\n[orig "
                "len: %d]\n[s21 len: %d]",
                input[_i].precision, input[_i].num, input[_i].precision,
                orig_out, s21_out, len_orig_out, len_s21_out);
  free(s21_out);
  free(orig_out);
}
END_TEST

int test_s21_exptoa(void) {
  Suite *s1 = suite_create("s21_exptoa");
  TCase *tc1_1 = tcase_create("s21_exptoa");
  SRunner *sr = srunner_create(s1);
  int nf;

  /* User-specified pre-run code */
  system("mkdir -p tests/logs");
  char full_filename[BUF_SIZE];
  sprintf(full_filename, "tests/logs/%s.log", __FILE_NAME__);
  srunner_set_log(sr, full_filename);

  suite_add_tcase(s1, tc1_1);
  tcase_add_loop_test(tc1_1, float_data, 0, 20);
  tcase_add_loop_test(tc1_1, double_data, 0, 20);
  tcase_add_loop_test(tc1_1, long_double_data, 0, 20);

  srunner_run_all(sr, CK_ENV);
  nf = srunner_ntests_failed(sr);
  srunner_free(sr);

  /* User-specified post-run code */
  return nf;
}
